#include <stdio.h>
2	+
#define V 4  // Number of vertices in the graph
3	+
4	+
// Function to print the color assignment
5	+
void printSolution(int color[]) {
6	+
    printf("Assigned colors are:\n");
7	+
    for (int i = 0; i < V; i++)
8	+
        printf("Vertex %d ---> Color %d\n", i, color[i]);
9	+
}
10	+
11	+
// Function to check if it's safe to color vertex v with color c
12	+
int isSafe(int v, int graph[V][V], int color[], int c) {
13	+
    for (int i = 0; i < V; i++)
14	+
        if (graph[v][i] && c == color[i])  // Check if adjacent vertices have the same color
15	+
            return 0;
16	+
    return 1;
17	+
}
18	+
19	+
// Recursive function to solve the graph coloring problem
20	+
int graphColoringUtil(int graph[V][V], int m, int color[], int v) {
21	+
    // If all vertices are assigned a color, return true
22	+
    if (v == V)
23	+
        return 1;
24	+
25	+
    // Try different colors for vertex v
26	+
    for (int c = 1; c <= m; c++) {
27	+
        // Check if color c can be assigned to vertex v
28	+
        if (isSafe(v, graph, color, c)) {
29	+
            color[v] = c;  // Assign color c to vertex v
30	+
31	+
            // Recur to assign colors to the rest of the vertices
32	+
            if (graphColoringUtil(graph, m, color, v + 1))
33	+
                return 1;
34	+
35	+
            // If assigning color c doesn't lead to a solution, backtrack
36	+
            color[v] = 0;
37	+
        }
38	+
    }
39	+
40	+
    // If no color can be assigned to this vertex, return false
41	+
    return 0;
42	+
}
43	+
44	+
// Function to solve the graph coloring problem
45	+
int graphColoring(int graph[V][V], int m) {
46	+
    int color[V] = {0};  // Initialize all vertices with no color (0)
47	+
48	+
    // Call the recursive utility function to solve the problem
49	+
    if (graphColoringUtil(graph, m, color, 0)) {
50	+
        printSolution(color);
51	+
        return 1;
52	+
    } else {
53	+
        printf("Solution does not exist\n");
54	+
        return 0;
55	+
    }
56	+
}
57	+
58	+
int main() {
59	+
    // Adjacency matrix representation of a graph
60	+
    int graph[V][V] = {
61	+
        {0, 1, 1, 1},
62	+
        {1, 0, 1, 0},
63	+
        {1, 1, 0, 1},
64	+
        {1, 0, 1, 0}
65	+
    };
66	+
67	+
    int m = 3;  // Number of colors
68	+
69	+
    graphColoring(graph, m);
70	+
    return 0;
71	+
}
