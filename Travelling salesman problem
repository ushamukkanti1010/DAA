#include <stdio.h>
2	+
#include <limits.h>
3	+
4	+
#define N 4  // Number of cities
5	+
6	+
int tsp(int dist[N][N], int pos, int visited, int dp[N][1<<N]) {
7	+
    // If all cities have been visited, return to the starting city
8	+
    if (visited == (1 << N) - 1) {
9	+
        return dist[pos][0]; // Return to start city
10	+
    }
11	+
12	+
    // If this subproblem has already been solved, return the stored result
13	+
    if (dp[pos][visited] != -1) {
14	+
        return dp[pos][visited];
15	+
    }
16	+
17	+
    int minCost = INT_MAX;
18	+
19	+
    // Try to visit all the unvisited cities and choose the minimum cost
20	+
    for (int city = 0; city < N; city++) {
21	+
        if ((visited & (1 << city)) == 0) {  // If city has not been visited
22	+
            int newCost = dist[pos][city] + tsp(dist, city, visited | (1 << city), dp);
23	+
            if (newCost < minCost) {
24	+
                minCost = newCost;
25	+
            }
26	+
        }
27	+
    }
28	+
29	+
    // Store the result in dp array and return it
30	+
    return dp[pos][visited] = minCost;
31	+
}
32	+
33	+
int main() {
34	+
    int dist[N][N] = {
35	+
        {0, 10, 15, 20},
36	+
        {10, 0, 35, 25},
37	+
        {15, 35, 0, 30},
38	+
        {20, 25, 30, 0}
39	+
    };
40	+
41	+
    int dp[N][1<<N];  // DP table to store intermediate results
42	+
43	+
    // Initialize dp array with -1
44	+
    for (int i = 0; i < N; i++) {
45	+
        for (int j = 0; j < (1 << N); j++) {
46	+
            dp[i][j] = -1;
47	+
        }
48	+
    }
49	+
50	+
    // Start the TSP from city 0 with only the starting city visited
51	+
    printf("Minimum cost of TSP: %d\n", tsp(dist, 0, 1, dp));
52	+
53	+
    return 0;
54	+
}
