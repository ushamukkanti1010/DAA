#include <stdio.h>


2	+
3	+
#define MAX 100  // Maximum number of elements in the set
4	+
5	+
// Function to print the current subset
6	+
void printSubset(int subset[], int size) {
7	+
    for (int i = 0; i < size; i++) {
8	+
        printf("%d ", subset[i]);
9	+
    }
10	+
    printf("\n");
11	+
}
12	+
13	+
// Backtracking function to find subsets with the given sum
14	+
void sumOfSubsets(int set[], int subset[], int n, int subsetSize, int total, int target, int index) {
15	+
    // If the total of the current subset equals the target sum, print the subset
16	+
    if (total == target) {
17	+
        printSubset(subset, subsetSize);
18	+
        return;
19	+
    }
20	+
21	+
    // Try to add more elements to the subset
22	+
    for (int i = index; i < n; i++) {
23	+
        // Only include elements if the total doesn't exceed the target
24	+
        if (total + set[i] <= target) {
25	+
            subset[subsetSize] = set[i];  // Add element to the subset
26	+
            sumOfSubsets(set, subset, n, subsetSize + 1, total + set[i], target, i + 1);  // Recur for remaining elements
27	+
        }
28	+
    }
29	+
}
30	+
31	+
int main() {
32	+
    int n, target;
33	+
    int set[MAX], subset[MAX];
34	+
35	+
    // Input the number of elements in the set
36	+
    printf("Enter the number of elements in the set: ");
37	+
    scanf("%d", &n);
38	+
39	+
    // Input the elements of the set
40	+
    printf("Enter the elements of the set: ");
41	+
    for (int i = 0; i < n; i++) {
42	+
        scanf("%d", &set[i]);
43	+
    }
44	+
45	+
    // Input the target sum
46	+
    printf("Enter the target sum: ");
47	+
    scanf("%d", &target);
48	+
49	+
    printf("Subsets with sum %d are:\n", target);
50	+
51	+
    // Call the backtracking function to find subsets with the target sum
52	+
    sumOfSubsets(set, subset, n, 0, 0, target, 0);
53	+
54	+
    return 0;
55	+
}
