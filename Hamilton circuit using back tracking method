#include <stdio.h>
2	+
#include <stdbool.h>
3	+
4	+
#define V 5  // Number of vertices in the graph
5	+
6	+
// Function to print the solution
7	+
void printSolution(int path[]) {
8	+
    printf("Hamiltonian Cycle found:\n");
9	+
    for (int i = 0; i < V; i++)
10	+
        printf("%d ", path[i]);
11	+
    printf("%d\n", path[0]);  // Print the starting vertex to complete the cycle
12	+
}
13	+
14	+
// Utility function to check if the vertex v can be added at index 'pos' in the Hamiltonian Cycle
15	+
bool isSafe(int v, int graph[V][V], int path[], int pos) {
16	+
    // Check if this vertex is an adjacent vertex of the previously added vertex
17	+
    if (graph[path[pos - 1]][v] == 0)
18	+
        return false;
19	+
20	+
    // Check if the vertex has already been included
21	+
    for (int i = 0; i < pos; i++)
22	+
        if (path[i] == v)
23	+
            return false;
24	+
25	+
    return true;
26	+
}
27	+
28	+
// Recursive function to solve the Hamiltonian Cycle problem
29	+
bool hamCycleUtil(int graph[V][V], int path[], int pos) {
30	+
    // Base case: If all vertices are included in the Hamiltonian Cycle
31	+
    if (pos == V) {
32	+
        // Check if there is an edge from the last included vertex to the first vertex
33	+
        if (graph[path[pos - 1]][path[0]] == 1)
34	+
            return true;
35	+
        else
36	+
            return false;
37	+
    }
38	+
39	+
    // Try different vertices as the next candidate in the Hamiltonian Cycle
40	+
    for (int v = 1; v < V; v++) {
41	+
        if (isSafe(v, graph, path, pos)) {
42	+
            path[pos] = v;  // Add vertex to the path
43	+
44	+
            // Recur to construct the rest of the path
45	+
            if (hamCycleUtil(graph, path, pos + 1))
46	+
                return true;
47	+
48	+
            // If adding vertex v doesn't lead to a solution, then remove it
49	+
            path[pos] = -1;
50	+
        }
51	+
    }
52	+
53	+
    // If no vertex can be added to the Hamiltonian Cycle constructed so far, then return false
54	+
    return false;
55	+
}
56	+
57	+
// Function to solve the Hamiltonian Cycle problem using backtracking
58	+
bool hamCycle(int graph[V][V]) {
59	+
    int path[V];
60	+
    for (int i = 0; i < V; i++)
61	+
        path[i] = -1;
62	+
63	+
    path[0] = 0;  // Start from the first vertex
64	+
65	+
    if (!hamCycleUtil(graph, path, 1)) {
66	+
        printf("No Hamiltonian Cycle exists.\n");
67	+
        return false;
68	+
    }
69	+
70	+
    printSolution(path);
71	+
    return true;
72	+
}
73	+
74	+
int main() {
75	+
    // Example graph represented as an adjacency matrix
76	+
    int graph[V][V] = {
77	+
        {0, 1, 0, 1, 0},
78	+
        {1, 0, 1, 1, 1},
79	+
        {0, 1, 0, 0, 1},
80	+
        {1, 1, 0, 0, 1},
81	+
        {0, 1, 1, 1, 0}
82	+
    };
83	+
84	+
    hamCycle(graph);
85	+
86	+
    return 0;
87	+
}
