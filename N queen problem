#include <stdio.h>


2	+
#define N 4  // You can change N for a larger board
3	+
4	+
// Function to print the solution
5	+
void printSolution(int board[N][N]) {
6	+
    for (int i = 0; i < N; i++) {
7	+
        for (int j = 0; j < N; j++) {
8	+
            printf("%d ", board[i][j]);
9	+
        }
10	+
        printf("\n");
11	+
    }
12	+
}
13	+
14	+
// Utility function to check if a queen can be placed at board[row][col]
15	+
int isSafe(int board[N][N], int row, int col) {
16	+
    int i, j;
17	+
18	+
    // Check this row on the left side
19	+
    for (i = 0; i < col; i++)
20	+
        if (board[row][i])
21	+
            return 0;
22	+
23	+
    // Check upper diagonal on the left side
24	+
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
25	+
        if (board[i][j])
26	+
            return 0;
27	+
28	+
    // Check lower diagonal on the left side
29	+
    for (i = row, j = col; j >= 0 && i < N; i++, j--)
30	+
        if (board[i][j])
31	+
            return 0;
32	+
33	+
    return 1;
34	+
}
35	+
36	+
// Recursive function to solve N-Queens problem using backtracking
37	+
int solveNQUtil(int board[N][N], int col) {
38	+
    // If all queens are placed, return true
39	+
    if (col >= N)
40	+
        return 1;
41	+
42	+
    // Try placing this queen in all rows one by one
43	+
    for (int i = 0; i < N; i++) {
44	+
        // Check if queen can be placed on board[i][col]
45	+
        if (isSafe(board, i, col)) {
46	+
            // Place the queen
47	+
            board[i][col] = 1;
48	+
49	+
            // Recursively place the rest of the queens
50	+
            if (solveNQUtil(board, col + 1))
51	+
                return 1;
52	+
53	+
            // If placing queen in board[i][col] doesn't lead to a solution
54	+
            // Backtrack: remove the queen from board[i][col]
55	+
            board[i][col] = 0;
56	+
        }
57	+
    }
