
#include <stdio.h>


2	+
#include <limits.h>
3	+
4	+
// Function to find the optimal cost of matrix multiplication
5	+
int matrixChainOrder(int p[], int n) {
6	+
    int dp[n][n]; // DP table to store optimal costs
7	+
8	+
    // Set diagonal elements to 0 (cost of multiplying one matrix is 0)
9	+
    for (int i = 1; i < n; i++) {
10	+
        dp[i][i] = 0;
11	+
    }
12	+
13	+
    // Fill the table using the optimal substructure property
14	+
    for (int length = 2; length < n; length++) {
15	+
        for (int i = 1; i < n - length + 1; i++) {
16	+
            int j = i + length - 1;
17	+
            dp[i][j] = INT_MAX;
18	+
            for (int k = i; k < j; k++) {
19	+
                int cost = dp[i][k] + dp[k+1][j] + p[i-1] * p[k] * p[j];
20	+
                if (cost < dp[i][j]) {
21	+
                    dp[i][j] = cost;
22	+
                }
23	+
            }
24	+
        }
25	+
    }
26	+
27	+
    // Return the optimal cost of multiplying matrices from 1 to n-1
28	+
    return dp[1][n-1];
29	+
}
30	+
31	+
int main() {
32	+
    int p[] = {1, 2, 3, 4}; // Dimensions of matrices (e.g., A1: 1x2, A2: 2x3, A3: 3x4)
33	+
    int n = sizeof(p) / sizeof(p[0]);
34	+
35	+
    printf("Minimum cost of matrix multiplication: %d\n", matrixChainOrder(p, n));
36	+
    
37	+
    return 0;
38	+
}
