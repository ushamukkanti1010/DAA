#include <stdio.h>


2	+
#include <limits.h>
3	+
#define N 4
4	+
int sum(int freq[], int i, int j) {
5	+
    int total = 0;
6	+
    for (int k = i; k <= j; k++)
7	+
        total += freq[k];
8	+
    return total;
9	+
}
10	+
int optimalBST(int keys[], int freq[], int n) {
11	+
    int cost[N][N]; // Table to store results of subproblems
12	+
    for (int i = 0; i < n; i++)
13	+
        cost[i][i] = freq[i];
14	+
    for (int length = 2; length <= n; length++) {
15	+
        for (int i = 0; i <= n - length; i++) {
16	+
            int j = i + length - 1;
17	+
            cost[i][j] = INT_MAX;
18	+
            for (int r = i; r <= j; r++) {
19	+
                int c = ((r > i) ? cost[i][r - 1] : 0) +
20	+
                        ((r < j) ? cost[r + 1][j] : 0) +
21	+
                        sum(freq, i, j);
22	+
23	+
                if (c < cost[i][j])
24	+
                    cost[i][j] = c;
25	+
            }
26	+
        }
27	+
    }
28	+
29	+
    return cost[0][n - 1];
30	+
}
31	+
32	+
int main() {
33	+
    int keys[N] = {10, 20, 30, 40};
34	+
    int freq[N] = {4, 2, 6, 3}; // Frequencies of keys
35	+
36	+
    int minCost = optimalBST(keys, freq, N);
37	+
    printf("Cost of Optimal BST is: %d\n", minCost);
38	+
39	+
    return 0;
40	+
}
